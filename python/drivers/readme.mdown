## Setup / Non-standard libraries used

* pyserial - to install run: "pip install pyserial"

## Basic description of scripts/Files

* Printer3DLib.py - Python Library built of of code that could be easily re-usable
* 3dPrinter_console.py - Python Application that allows you to Direcly enter G-Code into the printer
* 3dPrinter_reset.py - Python Application that "resets" the printer (Ex: Set's temps to 0, shuts off stepper motors, etc.)
* 3dPrinter.py - "Streams" G-Code to printer Via a Serial Port (Note: the USB connection on a Ardrino Board is identified as "serial port")
* print_server.py - A simple HTTP based Endpoint or sending G-Code to the Printer




## More Detail...
### 3dprinter.py

*Usage:* pyhton 3dprinter.py port='/dev/ttyACM0' baud=115200 file=./myFileToPrint.gcode
* port (Default: '/dev/ttyACM0') - the Serial port device file to use ('/dev/ttyACM0' is what the board usually ends up bing on the Raspberry-PI) 
* baud (Default: 115200) - the connection speed to used when connecting (Note: I had to change the firmware on my printer from 200000 -> 115200 since "200000" is not standard)
* file (required) - the file to stream to the printer

the program will Show all Data being sent to and recieved from the printer (It's also shows comments in the g-code file, but those are stripped out before being sent to the printer)

### print_server.py
Basic WIP Server for Manipulating the printer, it can recieve raw G-code and send it to the printer.

## Endpoints

# POST /api/printer/{printerId}/rawGcode 
Send Raw Gcode to printer (even while in the middle of a print/job)
*Post Body:* 
```
{
	"gcode": <Array of Strings> - The list of Gcode(s)/Commands To Execute on the printer
}
```
*Response Body:* 
```
{
	"printerResponse": <Array Of Strings>  - Response Lines from printer,
	"ok": <boolean> - Any Errors returnd from printer? (True -> No Errors)
	"linesExecuted": <Integer> - Number Of Lines Excuted before Error
}
```
*Note:* The enpoint will not return until the Printer Has Acknologed all commands sent (Ex: "Wait until Temp reached" will not return with a response unitl the temprature is reached)

# GET /api/printers
List the configured printers on the server

*Response Body:* <Array of strings> - the PrinterIds available on server

# POST /api/printers/new
Create a new printer (With Default/dummy Info) and return it's ID

# GET /api/printer/{printerId}
Get the specified printers Configuration

# DELETE /api/printer/{printerId}
Delete The specified Printer Configuration

# POST /api/printer/{printerId}
Update The specified printers configuration (Note Current Job Id Cannot be updated/changed from this endpoint )

# POST /api/printer/{printerId}/job
Update/Set the current job for the specified printer (Note: Does not automatically start Print)

*Post Body:* 
```
{ 
	"jobId": <String> - Id of the Job you wish to assign to this printer
}
```

# GET /api/printer/{printerId}/status (NOT IMPLEMENTED)
Get the current Status of the specified printer

# POST /api/printer/{printerId}/start (NOT IMPLEMENTED)
Start/Resume Current Print Job on specified printer

# POST /api/printer/{printerId}/stop (NOT IMPLEMENTED)
Stop / Cancel Current Print Job on printer 

# POST /api/printer/{id}/pause
Pause Current Print job

# GET /api/jobs
Get All JobIDs Currently available on server

*Response Body:* Arrays Of strings containing "JobIds"

# POST /api/jobs/new
Create A new Job

*Response Body:* ID of newly created job

# GET /api/job/{jobId}/log (NOT IMPLEMENTED)
Get Log data from Specified Job

# POST /api/job/{jobId}/gcode
Set Gcode to Run when job is executed
*Request Body:* ```{"rawData": <String> - Raw Text from gcode file}```
*Request Body:* ```{"gcodeList": <Array of Strings> - Gcode Lines to execute}```

# DELETE /api/job/{jobId}
Delete Specified Job & releated Data (Ex: Log files, stored g-code, etc.)


